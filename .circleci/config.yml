version: 2.1

orbs:
  hello: circleci/hello-build@volatile
  build-tools: ndintenfass/build-tools@dev:try
  orb-magic:
    orbs:
      cli: circleci/circleci-cli@volatile
      build-tools: ndintenfass/build-tools@dev:try
    jobs:
      illuminate-this-build:
        description: A job that outputs information about all the orbs used in the build in which the job is invoked.
        docker:
          - image: circleci/ruby:2.4.1
        parameters:
          checkout:
            type: boolean
            default: true
            description: >
              Boolean for whether to run a `checkout` first
               - default is false for the command, assuming you
               may have already done checkout in your job.
          config-path:
            type: string
            default: ".circleci/config.yml"
          working-file:
            type: string
            default: '~/.circleci/orb-introspection.yml'
        steps:
          - when:
              condition: << parameters.checkout >>
              steps:
                - checkout
          - cli/install
          - run:
              name: Install dependencies
              command: |
                gem install markdown-tables
                gem install indentation
                gem install colorize
          - build-tools/script-run:
              # TODO -- this is a bit heavy-handed and could probably be made much more elegant
              label: "Get the orb source for all the orbs used in << parameters.config-path >>"
              file-name: orb-instrospect.rb
              script: |
                #!/usr/local/bin/ruby
                require 'yaml'
                require 'open3'
                require 'fileutils'
                orbs = YAML.load_file('<< parameters.config-path >>')["orbs"]
                if orbs.nil?
                  puts "No orbs were found in << parameters.config-path >>."
                  exit true
                end
                metadata = {}
                orbs.each do |key, content|
                  metadata[key] = {}
                  if content.is_a?(String)
                    puts 'found orb ref ' + content + ' - attempting to pull source'
                    stdout_str, error_str, status = Open3.capture3('/usr/local/bin/circleci', 'orb', 'source', content)
                    puts error_str unless error_str.nil?
                    orbs[key] = YAML.load(stdout_str)
                    metadata[key]['ref'] = content
                  else
                    puts 'local orb ' + key + ' is inline.'
                    metadata[key]['ref'] = "inline"
                  end
                  content = orbs[key]
                  metadata[key]['description'] = content['description']
                  ['executors','commands','jobs'].each do |elem|
                    unless content[elem].nil?
                      metadata[key][elem] = {}
                      content[elem].each do |name, value|
                        metadata[key][elem][name] = {}
                        metadata[key][elem][name]['parameters'] = content[elem][name]['parameters']
                        metadata[key][elem][name]['description'] = content[elem][name]['description']
                      end
                    end
                  end
                end
                puts metadata.to_yaml
                FileUtils.mkdir_p(File.dirname('<< parameters.working-file >>'))
                open('<< parameters.working-file >>', 'w') do |f|
                  f.puts metadata.to_yaml
                end
          - build-tools/script-run:
              label: "Display orb info for << parameters.config-path >>"
              file-name: orb-instrospect.rb
              script: |
                #!/usr/local/bin/ruby
                require 'yaml'
                require 'indentation'
                require 'markdown-tables'
                require 'colorize'
                orbs = YAML.load_file('<< parameters.working-file >>')
                def disp(str)
                  return if str.nil?
                  puts str.indent(@indent)
                end
                def description_process(s, width=40)
                  return if s.nil?
                  maxlen = 50
                  truncate_string = "..."
                  l = maxlen - s.chars.length
                  (s.length > maxlen ? s[0...l] + truncate_string : s).to_s.tr("\n"," ")
                end
                def parameter_table(params)
                  return if params.nil?
                  labels = ['name', 'type', 'default', 'description']
                  data = []
                  params.each do |param, paramcontent|
                    data.push([param, paramcontent['type'], paramcontent['default'], description_process(paramcontent['description'])])
                  end
                  md_table = MarkdownTables.make_table(labels, data, is_rows: true, align: ['l', 'l', 'l', 'l'])
                  MarkdownTables.plain_text(md_table)
                end

                puts '# ORBS'
                puts '---------------------------------'
                orbs.each do |orb_alias, details|
                  @indent = 0
                  disp '## ' + orb_alias.colorize(:blue).colorize(:bold) + ' (' + details['ref'] + ')'
                  unless details['description'].nil?
                    disp details['description']
                  end
                  @indent = @indent + 2
                  ['jobs', 'executors', 'commands'].each do |element|
                    disp '### ' + element.capitalize
                    @indent = @indent + 2
                    if details[element].nil?
                      disp "NONE"
                      @indent = @indent - 2
                      next
                    end
                    details[element].each do |item, content|
                      disp (orb_alias + '/' + item).colorize(:blue)
                      @indent = @indent + 2
                      disp content['description']
                      disp parameter_table(content['parameters'])
                      puts ""
                      @indent = @indent - 2
                    end
                    @indent = @indent - 2
                  end
                end
workflows:
    "Orb Magic":
        jobs:
          - orb-magic/illuminate-this-build

version: 2.1

executors:
  default:
    parameters:
      image-name:
        type: string
        default: "cimg/node"
      image-tag:
        type: string
        default: "14.16.0-browsers"
    docker:
      - image: << parameters.image-name>>:<< parameters.image-tag >>

parameters:
  subgraphs-file:
    type: string
    default: "subgraphs.yml"
  supergraph-file:
    type: string
    default: supergraph.graphql
  port:
    type: integer
    default: 4000
  graphref:
    type: string
    default: funkyfederation
  subgraphs:
    type: string
    default: >
      subgraphs: {
        rick-and-morty: {
          routing_url: 'https://rickandmortyapi.com/graphql',
          schema: { file: 'rickmorty.graphql' }
        },
        countries: {
          routing_url: 'https://countries.trevorblades.com/',
          schema: { file: 'countries.graphql'}
        }
      }

commands:

  write-gateway-index:
    parameters:
      file:
        type: string
        default: index.js
      use-supergraph:
        type: boolean
        default: false
    steps:
      - run:
          name: Write the gateway startup code to << parameters.file >>
          command: |
            STUFF=$(cat \<<END_HEREDOC
            const { ApolloServer } = require('apollo-server');
            const { ApolloGateway } = require('@apollo/gateway');
            const { readFileSync } = require('fs');

            // Pass the ApolloGateway to the ApolloServer constructor
            console.log("start the server... {process.env.THISIP}");

            const gateway = new ApolloGateway(
              <<# parameters.use-supergraph >>{supergraphSdl: readFileSync("./<< pipeline.parameters.supergraph-file >>").toString(),}<</ parameters.use-supergraph >>
            );
            
            const server = new ApolloServer({
              gateway,
              debug: true,
              // Subscriptions are unsupported but planned for a future Gateway version.
              subscriptions: false
            });
            server.listen({host: process.env.THISIP, port: << pipeline.parameters.port >>}).then((result) => {
              console.log("Success", result);
            }).catch(err => {console.error(err)});
            END_HEREDOC
            )
            echo "$STUFF"
            echo "$STUFF" > << parameters.file >>
  
  query-gateway:
    steps:
      - run:
          name: wait until the gateway is ready
          command: while ! nc -z $(node -p "require('ip').address()") << pipeline.parameters.port >>; do sleep 0.1 ; done
      - run: 
          name: query the gateway
          command: |
            curl \
            -X POST \
            -H "Content-Type: application/json" \
            --data '{ "query": "{ continents { name } characters { results { name } } } " }' \
            http://$(node -p "require('ip').address()"):<< pipeline.parameters.port >>/


jobs:
  setup-supergraph:
    executor: rover/default
    steps:
      - rover/install
      - run: rover --version
      - run: rover graph fetch rickmorty@current > rickmorty.graphql
      - run: rover graph fetch countries1@current > countries.graphql
      - run: |
          echo "<< pipeline.parameters.subgraphs >>" > << pipeline.parameters.subgraphs-file >>
      - rover/compose:
          config: << pipeline.parameters.subgraphs-file >>
          file: << pipeline.parameters.supergraph-file >>
          workspace: true

      - run: 
          name: Publish subgraph rickmorty
          command: rover subgraph publish << pipeline.parameters.graphref >> --routing-url https://rickandmortyapi.com/graphql --schema rickmorty.graphql --name rickmorty
      - run:
          name: Publish subgraph countries
          command: rover subgraph publish << pipeline.parameters.graphref >> --routing-url https://countries.trevorblades.com/ --schema countries.graphql --name countries
    
  run-gateway-local-supergraph:
    executor: default
    steps:
      - attach_workspace:
          at: "."
      - run: 
          name: install special versions of gateway, federation, query-planner
          command: |
            npm init --yes
            npm install apollo-server graphql
            npm i https://7710-252760990-gh.circle-artifacts.com/0/storage/%40apollo/federation/federation-0.22.0.tgz
            npm i https://7710-252760990-gh.circle-artifacts.com/0/storage/%40apollo/query-planner/query-planner-0.0.13.tgz
            npm i https://7710-252760990-gh.circle-artifacts.com/0/storage/%40apollo/gateway/gateway-0.24.4.tgz
      - run:
          command: cat << pipeline.parameters.supergraph-file >>
      - write-gateway-index:
          use-supergraph: true
      - run:
          command: APOLLO_KEY=$APOLLO_KEY_GATEWAY APOLLO_GRAPH_VARIANT=current THISIP=$(node -p "require('ip').address()") node index.js
          background: true
          name: start gateway with a supergraph
      - query-gateway
 
  run-gateway-managed-federation:
    executor: default
    steps:
      - run: npm init --yes
      - run: npm install apollo-server graphql @apollo/gateway
      - write-gateway-index
      - run:
          command: APOLLO_KEY=$APOLLO_KEY_GATEWAY APOLLO_GRAPH_VARIANT=current THISIP=$(node -p "require('ip').address()") node index.js
          background: true
          name: start gateway
      - query-gateway


orbs:
  rover:
    executors:
      default:
        parameters:
          image-name:
            type: string
            default: "cimg/node"
          image-tag:
            type: string
            default: "15.11.0"
        docker:
          - image: << parameters.image-name>>:<< parameters.image-tag >>
    commands:
      install:
        parameters:
          version:
            type: string
            default: "v0.0.5"
        steps:
          ## TODO: don't install if we already have this version installed, unless a force parameter is true
          - run: curl -sSL https://raw.githubusercontent.com/apollographql/rover/<< parameters.version >>/installers/binstall/scripts/nix/install.sh | sh
          - run: echo 'export PATH=$HOME/.rover/bin:$PATH' >> $BASH_ENV
      compose:
        description: "Composes the given `config` (path to config file) to a file called supergraph.graphql (override with `file`). Optionally, persist to workspace."
        parameters:
          config:
            type: string
          file:
            type: string
            default: "supergraph.graphql"
          workspace:
            type: boolean
            default: false

        steps:
          - when:
              condition:
                equal:
                  - << parameters.config >>
                  - << parameters.file >>
              steps:
                - run:
                    name: "ERROR: config and file parameters cannot be the same when calling rover/compose - name: << parameters.config >>"
                    command: echo "Sorry, the config and destination file can't be the same. (<< parameters.config >>)" && exit 1
          - run: rover supergraph compose --config << parameters.config >> > << parameters.file >> && cat << parameters.file >>
          - when:
              condition: << parameters.workspace >>
              steps:
                - persist_to_workspace:
                    root: "."
                    paths:
                      - << parameters.file >>

workflows:
  mine:
    jobs:
      - setup-supergraph
      - run-gateway-managed-federation:
          requires:
            - setup-supergraph
      - run-gateway-local-supergraph:
          requires:
            - setup-supergraph


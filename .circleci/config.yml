version: 2.1

parameters:
  subgraphs-file:
    type: string
    default: "subgraphs.yml"
  supergraph-file:
    type: string
    default: supergraph.graphql
  port:
    type: integer
    default: 4000
  federated-graphref:
    type: string
    default: funkyfederation

# Define an inline orb for rover - we don't yet have a published orb, so this will suffice
orbs:
  rover:
    executors:
      default:
        parameters:
          image-name:
            type: string
            default: "cimg/node"
          image-tag:
            type: string
            default: "15.11.0"
        docker:
          - image: << parameters.image-name>>:<< parameters.image-tag >>
    commands:
      install:
        parameters:
          version:
            type: string
            default: "v0.0.7"
        steps:
          ## TODO: don't install if we already have this version installed, unless a force parameter is true
          - run:
              name: install rover version << parameters.version >>
              command: |
                curl -sSL https://raw.githubusercontent.com/apollographql/rover/<< parameters.version >>/installers/binstall/scripts/nix/install.sh | sh
                echo 'export PATH=$HOME/.rover/bin:$PATH' >> $BASH_ENV
      compose:
        description: "Composes the given `config` (path to config file) to a file called supergraph.graphql (override with `file`). Optionally, persist to workspace."
        parameters:
          config:
            type: string
          file:
            type: string
            default: "supergraph.graphql"
          workspace:
            type: boolean
            default: false

        steps:
          - when:
              condition:
                equal:
                  - << parameters.config >>
                  - << parameters.file >>
              steps:
                - run:
                    name: "ERROR: config and file parameters cannot be the same when calling rover/compose - name: << parameters.config >>"
                    command: echo "Sorry, the config and destination file can't be the same. (<< parameters.config >>)" && exit 1
          - run: rover supergraph compose --config << parameters.config >> > << parameters.file >> && cat << parameters.file >>
          - when:
              condition: << parameters.workspace >>
              steps:
                - persist_to_workspace:
                    root: "."
                    paths:
                      - << parameters.file >>

executors:
  default:
    parameters:
      tag:
        type: string
        default: "14.16.0-browsers"
    docker:
      - image: cimg/node:<< parameters.tag >>

jobs:
  compare-install-time:
    executor: rover/default
    steps:
      - rover/install
      - run: npm install apollo
  retrieve-and-publish:
    executor: rover/default
    steps:
      - rover/install
      - run: rover update check
      - introspect-and-append-contact:
          url: https://rickandmortyapi.com/graphql
          graphref: rickmorty@current
          contact-description: $(date -Is)
      - introspect-and-append-contact:
          url: https://countries.trevorblades.com/
          graphref: countries1@current
          contact-description: $(date -Is)

  publish-subgraphs:
    executor: rover/default
    steps:
      - rover/install
      - run: rover update check
      # - run: rover config whoami
      - run: rover graph fetch rickmorty@current > rickmorty.graphql
      - run: rover graph fetch countries1@current > countries.graphql
      - run: 
          name: Publish subgraph rickmorty
          command: rover subgraph publish << pipeline.parameters.federated-graphref >> --routing-url https://rickandmortyapi.com/graphql --schema rickmorty.graphql --name rickmorty
      - run:
          name: Publish subgraph countries
          command: rover subgraph publish << pipeline.parameters.federated-graphref >> --routing-url https://countries.trevorblades.com/ --schema countries.graphql --name countries
      - run:
          name: List subgraphs
          command: rover subgraph list << pipeline.parameters.federated-graphref >> 

  compose-supergraph:
    parameters:
      config:
        type: string
        default: >
          subgraphs: {
            rick-and-morty: {
              routing_url: 'https://rickandmortyapi.com/graphql',
              schema: { file: 'rickmorty.graphql' }
            },
            countries: {
              routing_url: 'https://countries.trevorblades.com/',
              schema: { file: 'countries.graphql'}
            }
          }

    executor: rover/default
    steps:
      - rover/install
      - run: rover update check
      # - run: rover config whoami
      - run: rover graph fetch rickmorty@current > rickmorty.graphql
      - run: rover graph fetch countries1@current > countries.graphql
      - run: 
          name: write config file to << pipeline.parameters.subgraphs-file >>
          command: |
            echo "<< parameters.config >>" > << pipeline.parameters.subgraphs-file >>
      - rover/compose:
          config: << pipeline.parameters.subgraphs-file >>
          file: << pipeline.parameters.supergraph-file >>
          workspace: true

  run-local-supergraph:
    executor: default
    steps:
      - attach_workspace:
          at: "."
      - run: 
          name: install special versions of gateway, federation, query-planner
          command: |
            npm init --yes
            npm install apollo-server graphql @apollo/gateway
      - run:
          name: show contents of << pipeline.parameters.supergraph-file >> (in the attached workspace)
          command: cat << pipeline.parameters.supergraph-file >>
      - write-gateway-index
      - run:
          command: APOLLO_KEY=$APOLLO_KEY_GATEWAY APOLLO_GRAPH_VARIANT=current THISIP=$(node -p "require('ip').address()") node index.js local
          background: true
          name: start gateway with a supergraph
      - query-gateway
 
  run-managed-federation-uplink:
    executor: default
    steps:
      - run: sleep 30
      - run:
          name: npm install apollo-server graphql @apollo/gateway
          command: |
            npm init --yes
            npm install apollo-server graphql @apollo/gateway
      - write-gateway-index
      - run:
          command: APOLLO_SCHEMA_CONFIG_DELIVERY_ENDPOINT=https://uplink.api.apollographql.com/ APOLLO_KEY=$APOLLO_KEY_GATEWAY APOLLO_GRAPH_VARIANT=current THISIP=$(node -p "require('ip').address()") node index.js
          background: true
          name: start gateway
      - query-gateway

  run-managed-federation:
    executor: default
    steps:
      - run:
          name: npm install apollo-server graphql @apollo/gateway
          command: |
            npm init --yes
            npm install apollo-server graphql @apollo/gateway
      - write-gateway-index
      - run:
          command: APOLLO_KEY=$APOLLO_KEY_GATEWAY APOLLO_GRAPH_VARIANT=current THISIP=$(node -p "require('ip').address()") node index.js
          background: true
          name: start gateway
      - query-gateway      

commands:
  introspect-and-append-contact:
    parameters:
      url:
        type: string
      graphref:
        type: string
      contact-name:
        type: string
        default: "Engineering"
      contact-url:
        type: string
        default: ""
      contact-description:
        type: string
        default: ""

    steps:
      - run: >
          rover graph introspect << parameters.url >> | 
          (echo 'directive @contact(name: String! url: String description: String) on SCHEMA' && cat) | 
          (echo "schema @contact(name: \"<< parameters.contact-name >>\", url: \"<< parameters.contact-url >>\", description: \"<< parameters.contact-description >>\") {query: Query}" && cat) | 
          rover graph publish << parameters.graphref >> --schema -
  write-gateway-index:
    parameters:
      file:
        type: string
        default: index.js
    steps:
      - run:
          name: "write the gateway startup code to << parameters.file >> (pass 'local' as an argument to use a local supergraph file)"
          command: |
            STUFF=$(cat \<<END_HEREDOC
            const { ApolloServer } = require('apollo-server');
            const { ApolloGateway } = require('@apollo/gateway');
            const { readFileSync } = require('fs');

            const args = process.argv.slice(2);
            const mode = args[0]

            console.log(`Starting Apollo Gateway in ${mode} mode ...`);

            const config = {};
            if (mode === "local"){
              const supergraph= "./<< pipeline.parameters.supergraph-file >>"
              console.log(`Using local: ${supergraph}`)
              config['supergraphSdl'] = readFileSync(supergraph).toString();
            }


            // Pass the ApolloGateway to the ApolloServer constructor
            console.log("start the server... {process.env.THISIP}");

            const gateway = new ApolloGateway(config);
            
            const server = new ApolloServer({
              gateway,
              debug: true,
              // Subscriptions are unsupported but planned for a future Gateway version.
              subscriptions: false
            });
            server.listen({host: process.env.THISIP, port: << pipeline.parameters.port >>}).then((result) => {
              console.log("Success", result);
            }).catch(err => {console.error(err)});
            END_HEREDOC
            )
            echo "$STUFF"
            echo "$STUFF" > << parameters.file >>
  
  query-gateway:
    steps:
      - run:
          name: wait up to a minute until the gateway is ready
          command: while ! nc -z $(node -p "require('ip').address()") << pipeline.parameters.port >>; do sleep 0.1 ; done
          no_output_timeout: 30s
      - run: 
          name: query the gateway
          command: |
            curl \
            -X POST \
            -H "Content-Type: application/json" \
            --data '{ "query": "{ continents { name } characters { results { name } } } " }' \
            http://$(node -p "require('ip').address()"):<< pipeline.parameters.port >>/ \
            -o result.json
      - run:
          name: show the resulting query
          command: jq . result.json



workflows:
  mine:
    jobs:
      - retrieve-and-publish
      - compare-install-time
      - publish-subgraphs:
          requires:
            - retrieve-and-publish
      - compose-supergraph:
          requires:
            - retrieve-and-publish
      - run-managed-federation:
          requires:
            - publish-subgraphs
      - run-managed-federation-uplink:
          requires:
            - publish-subgraphs      
      - run-local-supergraph:
          requires:
            - compose-supergraph

